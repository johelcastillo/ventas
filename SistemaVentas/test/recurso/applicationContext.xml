<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
     >

	<context:annotation-config />
 
	<!--  <context:component-scan base-package="com.satellite.controller" />-->
	<context:component-scan base-package="com.satellite" />
	<!-- in-memory database and a datasource -->
	<jdbc:embedded-database id="dataSource">
		<jdbc:script location="classpath:database/sisventa-hsqldb-schema.sql" />
		<jdbc:script location="classpath:database/sisventa-hsqldb-dataload.sql" />
	</jdbc:embedded-database>

	<!-- transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven/>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/satellite/mappers/*.xml" /> 
		<!--  <property name="typeAliasesPackage" value="com.satellite.domain" /> -->
		 <property name="configLocation" value ="classpath:recurso/mybatis-config.xml" /> 
		
 
 
 </bean>
		
	



	<!-- <bean class="org.mybatis.spring.transaction.SpringManagedTransactionFactory" 
		id="springManagedTransactionFactory"> <constructor-arg index="0" ref="dataSource" 
		/> </bean> -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="org.postgresql.Driver" /> <property 
		name="url" value="jdbc:postgresql:tutoriales" /> <property name="username" 
		value="postgres" /> <property name="password" value="autentia" /> </bean> -->
	<!-- A partir de este punto ponemos la definiciÃ³n de las interfaces mappers -->
	 
	<bean id="designDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.satellite.dao.DesignDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	 <bean id="modelDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.satellite.dao.ModelDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="productDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.satellite.dao.ProductDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> 
	<!-- <bean id="designDao" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.satellite.dao.DesignDao" /> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->

</beans>